n12 = n12,
n13 = n13,
n23 = n23,
n123 = n123,
category = names,  # Assign method names
fill = c("red", "blue", "green"),  # Custom colors
alpha = 0.5,
lwd = 2,
cex = 1.5,
cat.cex = 1.5,
cat.col = c("red", "blue", "green")
)
# venn based on proportion
venn_data <- list(
"DESeq2" = v1,
"limma" = v2,
"EdgeR" = v3
)
fit <- euler(venn_data)
plot(fit,
fills = c("red", "blue", "green"),
edges = TRUE,
labels = TRUE,
quantities = TRUE,  # Show values
main = "Proportional Venn Diagram")
}
knitr::opts_chunk$set(echo = TRUE)
library(AnVIL)
library(ggplot2)
library(dplyr)
library(readr)
library("recount3")
library("limma")
library("SummarizedExperiment")  # assays function come from here
source("GEDE_data_prep.R")
source("GEDE_simulation.R")
source("GEDE_real_analysis.R")
library(pheatmap)
library(DESeq2)
library(Matrix)
library(GEDE)
library(edgeR)
library(xgboost)
library(randomForest)
library(Hmisc)
library(VennDiagram)
library(eulerr)
# change output dir
out_dir = "/home/sliu/github/GEDE_benchmark/output/real_data_analysis"
knitr::opts_knit$set(root.dir = out_dir)
compare_deg(rownames(filtered_deseq2), rownames(filtered_limma), rownames(filtered_edger))
# Generate the Venn diagram
venn.plot <- draw.triple.venn(
area1 = length(v1),
area2 = length(v2),
area3 = length(v3),
n12 = n12,
n13 = n13,
n23 = n23,
n123 = n123,
category = names,  # Assign method names
fill = c("red", "blue", "green"),  # Custom colors
alpha = 0.5,
lwd = 2,
cex = 1.5,
cat.cex = 1.5,
cat.col = c("red", "blue", "green")
)
source("GEDE_data_prep.R")
# check overlap and make venn diagram
compare_deg_non_proportional_figure <- function(v1, v2, v3, names=c("DESeq2", "limma", "EdgeR")) {
# proportion-irrelavant figure
# Compute overlaps
n12 <- length(intersect(v1, v2))  # v1 ∩ v2
n13 <- length(intersect(v1, v3))  # v1 ∩ v3
n23 <- length(intersect(v2, v3))  # v2 ∩ v3
n123 <- length(Reduce(intersect, list(v1, v2, v3)))  # v1 ∩ v2 ∩ v3
# Generate the Venn diagram
venn.plot <- draw.triple.venn(
area1 = length(v1),
area2 = length(v2),
area3 = length(v3),
n12 = n12,
n13 = n13,
n23 = n23,
n123 = n123,
category = names,  # Assign method names
fill = c("red", "blue", "green"),  # Custom colors
alpha = 0.5,
lwd = 2,
cex = 1.5,
cat.cex = 1.5,
cat.col = c("red", "blue", "green")
)
}
compare_deg_proportional_figure <- function(v1, v2, v3, names=c("DESeq2", "limma", "EdgeR")) {
# venn based on proportion
venn_data <- list(
"DESeq2" = v1,
"limma" = v2,
"EdgeR" = v3
)
fit <- euler(venn_data)
plot(fit,
fills = c("red", "blue", "green"),
edges = TRUE,
labels = TRUE,
quantities = TRUE,  # Show values
main = "Proportional Venn Diagram")
return(fit)
}
compare_deg_non_proportional_figure(rownames(filtered_deseq2), rownames(filtered_limma), rownames(filtered_edger))
# check overlap and make venn diagram
compare_deg_non_proportional_figure <- function(v1, v2, v3, names=c("DESeq2", "limma", "EdgeR")) {
# proportion-irrelavant figure
# Compute overlaps
n12 <- length(intersect(v1, v2))  # v1 ∩ v2
n13 <- length(intersect(v1, v3))  # v1 ∩ v3
n23 <- length(intersect(v2, v3))  # v2 ∩ v3
n123 <- length(Reduce(intersect, list(v1, v2, v3)))  # v1 ∩ v2 ∩ v3
# Generate the Venn diagram
venn.plot <- draw.triple.venn(
area1 = length(v1),
area2 = length(v2),
area3 = length(v3),
n12 = n12,
n13 = n13,
n23 = n23,
n123 = n123,
category = names,  # Assign method names
fill = c("red", "blue", "green"),  # Custom colors
alpha = 0.5,
lwd = 2,
cex = 1.5,
cat.cex = 1.5,
cat.col = c("red", "blue", "green")
)
grid.draw(venn.plot)
}
compare_deg_non_proportional_figure(rownames(filtered_deseq2), rownames(filtered_limma), rownames(filtered_edger))
# check overlap and make venn diagram
compare_deg_non_proportional_figure <- function(v1, v2, v3, names=c("DESeq2", "limma", "EdgeR")) {
# proportion-irrelavant figure
# Compute overlaps
n12 <- length(intersect(v1, v2))  # v1 ∩ v2
n13 <- length(intersect(v1, v3))  # v1 ∩ v3
n23 <- length(intersect(v2, v3))  # v2 ∩ v3
n123 <- length(Reduce(intersect, list(v1, v2, v3)))  # v1 ∩ v2 ∩ v3
# Generate the Venn diagram
venn.plot <- draw.triple.venn(
area1 = length(v1),
area2 = length(v2),
area3 = length(v3),
n12 = n12,
n13 = n13,
n23 = n23,
n123 = n123,
category = names,  # Assign method names
fill = c("red", "blue", "green"),  # Custom colors
alpha = 0.5,
lwd = 2,
cex = 1.5,
cat.cex = 1.5,
cat.col = c("red", "blue", "green")
)
grid.newpage()  # Create a new plotting page
grid.draw(venn.plot)  # Draw the Venn diagram
}
compare_deg_non_proportional_figure(rownames(filtered_deseq2), rownames(filtered_limma), rownames(filtered_edger))
compare_deg_proportional_figure(rownames(filtered_deseq2), rownames(filtered_limma), rownames(filtered_edger))
compare_deg_proportional_figure <- function(v1, v2, v3, names=c("DESeq2", "limma", "EdgeR")) {
# venn based on proportion
venn_data <- list(
"DESeq2" = v1,
"limma" = v2,
"EdgeR" = v3
)
fit <- euler(venn_data)
p <- plot(fit,
fills = c("red", "blue", "green"),
edges = TRUE,
labels = TRUE,
quantities = TRUE,  # Show values
main = "Proportional Venn Diagram")
print(p)
return(fit)
}
compare_deg_proportional_figure(rownames(filtered_deseq2), rownames(filtered_limma), rownames(filtered_edger))
result
results
out6 = list()
out6$filtered_deseq2 <- filtered_deseq2
out6$filtered_edger <- filtered_edger
out6$union_deg <- union(rownames(filtered_deseq2), rownames(filtered_edger))  # this is the finding before data correction
out6$overlap_deg <- intersect(rownames(filtered_deseq2), rownames(filtered_edger)) # this serves as ground truth finding
save(out6, file="output_real_data_analysis.Rdata")
names(input_data)
rm(input_data$voom_counts)
# the variable names might be different, here is Data_BRCA
# load("input_Recount3_BRCA_race.Rdata")
input_data <- Data_BRCA
names(input_data)
# considering that we may switch data, put all variables here for global management
# the variable names might be different, here is Data_BRCA
# load("input_Recount3_BRCA_race.Rdata")
input_data <- Data_BRCA
deg_condition = "tcga.gdc_cases.demographic.race"
cutoff_pvalue = 0.05
cutoff_log2fc = 0.5
# if there are too many DEG, we continue filter degs by a new cutoff
new_log2fc = 1
input_data$counts
dim(input_data$counts)
dim(input_data$group)
input_data$group[single_condition]
levels(input_data$group[single_condition])
table(levels(input_data$group[single_condition]))
table(input_data$group[single_condition])
names(table(input_data$group[single_condition]))
group_values = levels(as.factor(df_meta[[single_condition]]))
group_values
df_meta[df_meta[single_condition] == group_values[1], ]
dim(df_meta[df_meta[single_condition] == group_values[1], ])
rownames(df_meta[df_meta[single_condition] == group_values[1], ])
sample_grp_1 = rownames(df_meta[df_meta[single_condition] == group_values[1], ])
sample_grp_2 = rownames(df_meta[df_meta[single_condition] == group_values[2], ])
seq(0.05, 1)
seq(0.05, 1, 0.05)
# loop DEGs
for (sample_rate in seq(0.1, 1, 0.1)) {
print(sample_rate)
}
sample_grp_1
length(sample_grp_1)
length(sample_grp_1) * sample_rate
sample_rate=0.05
length(sample_grp_1) * sample_rate
round(length(sample_grp_1) * sample_rate)
sample_rate = 0.2
select_1 = sample(sample_grp_1, size = round(length(sample_grp_1) * sample_rate))
length(select_1)
keep_data = c(select_1, select_2)
select_2 = sample(sample_grp_2, size = round(length(sample_grp_2) * sample_rate))
keep_data = c(select_1, select_2)
length(keep_data)
head(input_data$counts)
input_data$counts[1:3, 1:5]
# filter df and metadata
temp_df_count = input_data$counts[rownames(input_data$counts) %in% keep_data, ]
dim(temp_df_count)
temp_df_count[1:3, 1:5]
input_data$counts[rownames(input_data$counts) %in% keep_data, ]
input_data$counts
# filter df and metadata
temp_df_count = input_data$counts[ , colnames(input_data$counts) %in% keep_data]
dim(temp_df_count)
temp_df_count[1:3, 1:5]
input_data$group[1:3, 1:5]
input_data$group
input_data$group[1:3, 1:3]
temp_df_meta = input_data$group[rownames(input_data$group %in% keep_data) ,]
dim(temp_df_meta)
temp_df_meta = input_data$group[rownames(input_data$group) %in% keep_data, ]
dim_temp_df_meta
dim(temp_df_meta)
# filter df and metadata
temp_df_count = input_data$counts[ , keep_data]
temp_df_meta = input_data$group[keep_data, ]
dim(temp_df_count)
dim(temp_df_meta)
colnames(temp_df_count)
colnames(temp_df_count) == rownames(temp_df_meta)
sum(colnames(temp_df_count) == rownames(temp_df_meta))
# call DEG, note we use "new_log2fc" here because we scale up the DEGs form full data
temp_deg_deseq2 <- run_DESeq2_for_df_and_meta(df_count=temp_df_count, df_meta=temp_df_meta, single_condition=deg_condition, pvalue=cutoff_pvalue, log2fc= new_log2fc )
sample_rate
dim(filtered_deseq2)
965/1102
length(select_1)
sample_rate = 0.8
# random sample
set.seed(123)
select_1 = sample(sample_grp_1, size = round(length(sample_grp_1) * sample_rate))
select_2 = sample(sample_grp_2, size = round(length(sample_grp_2) * sample_rate))
keep_data = c(select_1, select_2)
# filter df and metadata
temp_df_count = input_data$counts[ , keep_data]
temp_df_meta = input_data$group[keep_data, ]
# call DEG, note we use "new_log2fc" here because we scale up the DEGs form full data
temp_deg_deseq2 <- run_DESeq2_for_df_and_meta(df_count=temp_df_count, df_meta=temp_df_meta, single_condition=deg_condition, pvalue=cutoff_pvalue, log2fc= new_log2fc )
# regular Venn
compare_deg_non_proportional_figure(rownames(filtered_deseq2), rownames(filtered_limma), rownames(filtered_edger))
# proportional Venn
compare_deg_proportional_figure(rownames(filtered_deseq2), rownames(filtered_limma), rownames(filtered_edger))
dim(input_data$group)
seq(5, 85, 10)
knitr::opts_chunk$set(echo = TRUE)
library(AnVIL)
library(ggplot2)
library(dplyr)
library(readr)
library("recount3")
library("limma")
library("SummarizedExperiment")  # assays function come from here
source("GEDE_data_prep.R")
source("GEDE_simulation.R")
source("GEDE_real_analysis.R")
library(pheatmap)
library(DESeq2)
library(Matrix)
library(GEDE)
library(edgeR)
library(xgboost)
library(randomForest)
library(Hmisc)
library(VennDiagram)
library(eulerr)
# change output dir
out_dir = "/home/sliu/github/GEDE_benchmark/output/real_data_analysis"
knitr::opts_knit$set(root.dir = out_dir)
# sub-sample size for saturation analysis, I observed that even 20% (40) cases can recover 87% DEGs, this is already large enough
# so let's start from 5 and end until around 100, manually pick the end point for now
sample_size = seq(5, 85, 10)
sample_n = 5
set.seed(123)
select_1 = sample(sample_grp_1, size = sample_n)
select_2 = sample(sample_grp_2, size = sample_n)
keep_data = c(select_1, select_2)
# filter df and metadata
temp_df_count = input_data$counts[ , keep_data]
temp_df_meta = input_data$group[keep_data, ]
# call DEG, note we use "new_log2fc" here because we scale up the DEGs form full data
temp_deg_deseq2 <- run_DESeq2_for_df_and_meta(df_count=temp_df_count, df_meta=temp_df_meta, single_condition=deg_condition, pvalue=cutoff_pvalue, log2fc= new_log2fc )
temp_deg_edger <- run_edgeR_for_df_and_meta(df_count=temp_df_count, df_meta=temp_df_meta, single_condition=deg_condition, pvalue=cutoff_pvalue, log2fc= new_log2fc )
dim(temp_deg_deseq2)
dim(temp_deg_edger)
out6
View(out6)
temp_deg_deseq2
rownames(temp_deg_deseq2)
temp_list = list()
temp_list$deg_deseq2 = temp_deg_deseq2
temp_list$deg_edger = temp_deg_edger
temp_list$union_deg = union(rownames(temp_deg_deseq2), rownames(temp_deg_edger))
temp_list$intersect_deg = intersect(rownames(temp_deg_deseq2), rownames(temp_deg_edger))
temp_list
length(temp_list)
length(temp_list$union_deg)
length(temp_list$intersect_deg)
out6$overlap_deg
intersect(temp_list$union_deg, out6$overlap_deg)
sample_n
temp_list = list()
temp_list$deg_deseq2 = temp_deg_deseq2
temp_list$deg_edger = temp_deg_edger
temp_list$union_deg = union(rownames(temp_deg_deseq2), rownames(temp_deg_edger))
temp_list$intersect_deg = intersect(rownames(temp_deg_deseq2), rownames(temp_deg_edger))
temp_list$gt_recover_by_union = intersect(temp_list$union_deg, out6$overlap_deg)
temp_list$gt_recover_by_union_ratio = length(temp_list$gt_recover_by_union) / length(out6$overlap_deg)
temp_list$gt_recover_by_intersect = intersect(temp_list$intersect_deg, , out6$overlap_deg)
temp_list$gt_recover_by_intersect = intersect(temp_list$intersect_deg, out6$overlap_deg)
temp_list$gt_recover_by_intersect_ratio = length(temp_list$gt_recover_by_intersect) / length(out6$overlap_deg)
temp_list
names(out6)
# add this list to out6
out6[[paste0("subsample_result_of_size_", sample_n)]] <- temp_list
names(out6)
sample_n=85
# random sample
set.seed(123)
select_1 = sample(sample_grp_1, size = sample_n)
select_2 = sample(sample_grp_2, size = sample_n)
keep_data = c(select_1, select_2)
# filter df and metadata
temp_df_count = input_data$counts[ , keep_data]
temp_df_meta = input_data$group[keep_data, ]
# call DEG, note we use "new_log2fc=1" here because we scale up the DEGs form full data
temp_deg_deseq2 <- run_DESeq2_for_df_and_meta(df_count=temp_df_count, df_meta=temp_df_meta, single_condition=deg_condition, pvalue=cutoff_pvalue, log2fc= new_log2fc)
temp_deg_edger <- run_edgeR_for_df_and_meta(df_count=temp_df_count, df_meta=temp_df_meta, single_condition=deg_condition, pvalue=cutoff_pvalue, log2fc= new_log2fc)
names(out6)
# create a new list to store results and nest it into out6
temp_list = list()
temp_list$deg_deseq2 = temp_deg_deseq2
temp_list$deg_edger = temp_deg_edger
temp_list$union_deg = union(rownames(temp_deg_deseq2), rownames(temp_deg_edger))
temp_list$intersect_deg = intersect(rownames(temp_deg_deseq2), rownames(temp_deg_edger))
temp_list$gt_recover_by_union = intersect(temp_list$union_deg, out6$overlap_deg)
temp_list$gt_recover_by_union_ratio = length(temp_list$gt_recover_by_union) / length(out6$overlap_deg)
temp_list$gt_recover_by_intersect = intersect(temp_list$intersect_deg, out6$overlap_deg)
temp_list$gt_recover_by_intersect_ratio = length(temp_list$gt_recover_by_intersect) / length(out6$overlap_deg)
# add this list to out6
out6[[paste0("subsample_result_of_size_", sample_n)]] <- temp_list
rm(temp_list)
names(out6)
out6$subsample_result_of_size_85
sample_n
dim(sample_grp_1)
length(sample_grp_1)
seq(0.1, 0.9, 0.1)
ratio
ratio
group_values = levels(as.factor(df_meta[[single_condition]]))
# split group and do random sample
sample_grp_1 = rownames(df_meta[df_meta[single_condition] == group_values[1], ])
sample_grp_2 = rownames(df_meta[df_meta[single_condition] == group_values[2], ])
# loop DEGs by different sample rate, note that for the 200 vs 300 RNA-seq case, 20% can recover 87.5% DEGs
# Note: here we count DEG recovery rate: those found in full data, NOT all DEGs here
out6$subsample_size = sample_size
sample_raio = seq(0.1, 0.9, 0.1)
# init saturation results
saturation_union_recover_rate = c()
saturation_intersect_recover_rate = c()
for (raio in sample_raio) {
print(raio)
# random sample
set.seed(123)
select_1 = sample(sample_grp_1, size = round(raio * length(sample_grp_1)))
select_2 = sample(sample_grp_2, size = round(raio * length(sample_grp_2)))
keep_data = c(select_1, select_2)
# filter df and metadata
temp_df_count = input_data$counts[ , keep_data]
temp_df_meta = input_data$group[keep_data, ]
# call DEG, note we use "new_log2fc=1" here because we scale up the DEGs form full data
temp_deg_deseq2 <- run_DESeq2_for_df_and_meta(df_count=temp_df_count, df_meta=temp_df_meta, single_condition=deg_condition, pvalue=cutoff_pvalue, log2fc= new_log2fc)
temp_deg_edger <- run_edgeR_for_df_and_meta(df_count=temp_df_count, df_meta=temp_df_meta, single_condition=deg_condition, pvalue=cutoff_pvalue, log2fc= new_log2fc)
# create a new list to store results and nest it into out6
temp_list = list()
temp_list$deg_deseq2 = temp_deg_deseq2
temp_list$deg_edger = temp_deg_edger
temp_list$union_deg = union(rownames(temp_deg_deseq2), rownames(temp_deg_edger))
temp_list$intersect_deg = intersect(rownames(temp_deg_deseq2), rownames(temp_deg_edger))
temp_list$gt_recover_by_union = intersect(temp_list$union_deg, out6$overlap_deg)
temp_list$gt_recover_by_union_ratio = length(temp_list$gt_recover_by_union) / length(out6$overlap_deg)
temp_list$gt_recover_by_intersect = intersect(temp_list$intersect_deg, out6$overlap_deg)
temp_list$gt_recover_by_intersect_ratio = length(temp_list$gt_recover_by_intersect) / length(out6$overlap_deg)
# add plot stats
saturation_union_recover_rate = c(saturation_union_recover_rate, temp_list$gt_recover_by_union_ratio)
saturation_intersect_recover_rate = c(saturation_intersect_recover_rate, temp_list$gt_recover_by_intersect_ratio)
# add this list to out6
out6[[paste0("subsample_result_of_size_", sample_n)]] <- temp_list
rm(temp_list)
}
# save and plot results
saturation_results = list()
saturation_results$ratio = sample_raio
saturation_results$union_recover = saturation_union_recover_rate
saturation_results$intersect_recover = saturation_intersect_recover_rate
out6$saturation_before_GEDE = saturation_results
out6$saturation_before_GEDE
library(ggplot2)
library(reshape2)
knitr::opts_chunk$set(echo = TRUE)
library(AnVIL)
library(ggplot2)
library(reshape2)
library(dplyr)
library(readr)
library("recount3")
library("limma")
library("SummarizedExperiment")  # assays function come from here
source("GEDE_data_prep.R")
source("GEDE_simulation.R")
source("GEDE_real_analysis.R")
library(pheatmap)
library(DESeq2)
library(Matrix)
library(GEDE)
library(edgeR)
library(xgboost)
library(randomForest)
library(Hmisc)
library(VennDiagram)
library(eulerr)
# change output dir
out_dir = "/home/sliu/github/GEDE_benchmark/output/real_data_analysis"
knitr::opts_knit$set(root.dir = out_dir)
df <- data.frame(
ratio = out6$saturation_before_GEDE$ratio,
union_recover = out6$saturation_before_GEDE$union_recover,
intersect_recover = out6$saturation_before_GEDE$intersect_recover
)
df_long <- melt(df, id.vars = "ratio", variable.name = "Type", value.name = "Recovery")
ggplot(df_long, aes(x = ratio, y = Recovery, color = Type, group = Type)) +
geom_line(size = 1) +  # Draw lines
geom_point(size = 2) + # Add points for better visibility
labs(title = "Saturation Recovery", x = "Ratio", y = "Recovery Value") +
scale_color_manual(values = c("red", "blue")) +  # Customize colors
theme_minimal()
ggplot(df_long, aes(x = ratio, y = Recovery, color = Type, group = Type)) +
geom_line(size = 1) +  # Draw lines
geom_point(size = 2) + # Add points for better visibility
geom_text(aes(label = round(Recovery, 3)), vjust = -0.5, size = 4) + # Add text labels
labs(title = "Saturation Recovery", x = "Ratio", y = "Recovery Value") +
scale_color_manual(values = c("red", "blue")) +  # Customize colors
theme_minimal()
ggplot(df_long, aes(x = ratio, y = Recovery, color = Type, group = Type)) +
geom_line(size = 1) +  # Draw lines
geom_point(size = 2) + # Add points for better visibility
geom_text(aes(label = round(Recovery, 3)), vjust = -0.5, size = 4) + # Add text labels
labs(title = "Saturation Analysis", x = "Subsample ratio", y = "Recovery ratio") +
scale_color_manual(values = c("red", "blue")) +  # Customize colors
theme_minimal()
save(out6, file="output_real_data_analysis.Rdata")
ggplot(df_long, aes(x = ratio, y = Recovery, color = Type, group = Type)) +
geom_line(size = 1) +  # Draw lines
geom_point(size = 2) + # Add points for better visibility
geom_text(aes(label = round(Recovery, 3)), vjust = -0.5, size = 4) + # Add text labels
labs(title = "Saturation Analysis", x = "Subsample ratio", y = "Recovery ratio") +
scale_color_manual(values = c("red", "blue")) +  # Customize colors
theme_minimal()
ls
?GEDE
